MSSQL

Lecture 1:
--CREATE DATABASE [Minions2]

USE [Minions2]

--CREATE TABLE [Minions](
--	[Id] INT NOT NULL,
--	[Name] NVARCHAR(50) NOT NULL,
--	[Age] INT
--)

--ALTER TABLE [Minions]
--ADD CONSTRAINT PK_MinionsId PRIMARY KEY (Id)

--DROP TABLE [Minions]

CREATE TABLE [Towns](
	[Id] INT PRIMARY KEY NOT NULL,
	[Name] NVARCHAR(50) NOT NULL
)

ALTER TABLE [Minions]
ADD [TownId] INT

ALTER TABLE [Minions]
ADD CONSTRAINT FK_MinionsTownId FOREIGN KEY (TownId) REFERENCES [Towns](Id)

INSERT INTO [Towns]([Id], [Name]) VALUES
(1,'Sofia'),
(2,'Varna'),
(3,'Plovdiv')

INSERT INTO [Minions]([Id], [Name], [Age], [TownId]) VALUES
(1,'Kevin',22, 1),
(2,'Bob',35, 2)

TRUNCATE TABLE[Minions]

CREATE TABLE [Users](
	[Id] BIGINT PRIMARY KEY IDENTITY,
	[Username] VARCHAR(30) UNIQUE NOT NULL,
	[Password] VARCHAR(26) NOT NULL,
	[ProfilePicture] VARBINARY(MAX),
	CHECK (DATALENGTH(ProfilePicture) <= 900000),
	[LastLoginTime] DATETIME2,
	[IsDeleted] BIT NOT NULL
)

Lecture 2:
INSERT INTO [Projects] (Name, StartDate) VALUES
	('Jacket',GETDATE())


INSERT INTO [Towns] VALUES
	('Paris')
	,('Paris')


DELETE FROM [Employees]
WHERE EmployeeID=7

TRUNCATE TABLE [Towns]

UPDATE [Projects]
SET [EndDate] =GETDATE()
WHERE [EndDate] IS NULL

SELECT * FROM [Projects]

SELECT * FROM Employees
SELECT * FROM Departments

SELECT CONCAT(FirstName,' ',LastName) AS [Full Name]
	,[JobTitle] AS [Job Title]
	,[Salary]
FROM Employees

SELECT DISTINCT DepartmentID
FROM Employees

SELECT LastName, DepartmentId AS [SOME]
FROM Employees
WHERE DepartmentID=1

SELECT [EmployeeID], [FirstName]
FROM Employees AS e
WHERE e.MiddleName IS NULL AND E.JobTitle = 'Production Technician'

CREATE VIEW v_EmployeeWithHighestSalary AS
SELECT [FirstName] AS [First Name], [Salary] 
FROM [Employees]

SELECT * FROM v_EmployeeWithHighestSalary


USE SoftUni

SELECT * FROM [Towns]

INSERT INTO [Towns] (Name) VALUES(
	('Plovdiv1')
	,('Varna1')
)

UPDATE [Towns]
SET [Name]='New York City'
WHERE [TownId]=20

DELETE FROM [Towns]
WHERE [Name]='New York City'

SELECT *
FROM [Characters]
ORDER BY [Name]

SELECT * 
FROM [Peaks]
ORDER BY [PeakName]

SELECT [CountryName],[Population]
FROM [Countries] AS c
WHERE c.ContinentCode='EU'
ORDER BY [Population] DESC,
		 [CountryName]
		 
		 
		 SELECT [Name] 
FROM [Departments]

SELECT CONCAT([FirstName],'.',[LastName],'@softuni.bg') AS [Full Email Address]
FROM Employees

SELECT DISTINCT [Salary]
FROM Employees

SELECT * FROM Employees AS e
WHERE e.JobTitle = 'Sales Representative'

SELECT [FirstName],[LastName],[JobTitle]
FROM Employees AS e
WHERE e.Salary BETWEEN 20000 AND 30000

SELECT CONCAT([FirstName],' ',[MiddleName],' ',[LastName]) AS [Full Name]
FROM Employees AS e
WHERE e.Salary IN(25000,14000,12500,23600)

SELECT [FirstName],[LastName]
FROM Employees AS e
WHERE e.ManagerID IS NULL

SELECT [FirstName],[LastName],[Salary]
FROM Employees AS e
WHERE E.Salary > 50000
ORDER BY [Salary] DESC 

SELECT TOP(5) [FirstName], [LastName]
FROM Employees
ORDER BY [Salary] DESC

SELECT [FirstName],[LastName]
FROM Employees AS e
WHERE e.DepartmentID =4

SELECT * 
FROM Employees
ORDER BY [Salary] DESC,
		 [FirstName],
		 [LastName] DESC,
		 [MiddleName]

CREATE VIEW v_EmployeeSalaries AS
SELECT [FirstName],[LastName],[Salary]
FROM Employees

SELECT * FROM v_EmployeeSalaries

UPDATE [Employees]
SET [MiddleName]=''
WHERE [MiddleName] IS NULL

CREATE VIEW v_EmployeeNameJobTitle AS
SELECT CONCAT([FirstName],' ',[MiddleName],' ',[LastName]) AS [Full Name]
			 ,[JobTitle] AS [Job Title]
FROM Employees

SELECT * FROM v_EmployeeNameJobTitle

SELECT DISTINCT [JobTitle]
FROM Employees

SELECT TOP(10) *
FROM [Projects]
ORDER BY [StartDate],
		 [Name]

SELECT TOP(7) [FirstName],[LastName],[HireDate]
FROM Employees
ORDER BY [HireDate] DESC

UPDATE [Employees]
SET [Salary]=[Salary]*1.12
WHERE [DepartmentID] IN(1,2,4,11)

SELECT [CountryName], [CurrencyCode],
		CASE
			WHEN [CurrencyCode]='EUR' THEN 'Euro'
			WHEN [CurrencyCode]='USD' THEN 'Dollar'
			ELSE 'No Euro'
		END AS [Currency]
  FROM [Countries]
  ORDER BY [CountryName] 
  
LECTURE 3:
CREATE DATABASE TableRelations

CREATE TABLE Passports(
	PassportID INT PRIMARY KEY NOT NULL IDENTITY(101,1),
	PassportNumber VARCHAR(20) NOT NULL
)

INSERT INTO Passports VALUES
('N34FG15'),
('K65R478'),
('SKSK877')

CREATE TABLE Persons(
	PersonID INT PRIMARY KEY NOT NULL IDENTITY(1,1),
	FirstName VARCHAR(50) NOT NULL,
	Salary DECIMAL NOT NULL,
	PassportID INT UNIQUE FOREIGN KEY REFERENCES Passports(PassportID)
)

INSERT INTO Persons VALUES
('Roberto',15278,102),
('Tom',87445,103),
('Yana',4578,101)

SELECT * FROM Persons

CREATE TABLE Manufacturers(
	ManufacturerID INT PRIMARY KEY NOT NULL IDENTITY,
	[Name] VARCHAR(30) NOT NULL,
	EstablishedOn DATETIME2
)

CREATE TABLE Models(
	ModelID INT PRIMARY KEY NOT NULL IDENTITY(101,1),
	[Name] VARCHAR(30) NOT NULL,
	ManufacturerID INT FOREIGN KEY REFERENCES Manufacturers(ManufacturerID)
)


CREATE TABLE Students(
	StudentID INT PRIMARY KEY IDENTITY NOT NULL,
	[Name] VARCHAR(30) NOT NULL
)

CREATE TABLE Exams(
	ExamID INT PRIMARY KEY IDENTITY(101,1) NOT NULL,
	[Name] VARCHAR(30) NOT NULL
)

CREATE TABLE StudentsExams(
	StudentID INT FOREIGN KEY REFERENCES Students(StudentID) NOT NULL,
	ExamID INT FOREIGN KEY REFERENCES Exams(ExamID) NOT NULL
	PRIMARY KEY(StudentID, ExamID)
)

CREATE TABLE Teachers(
	TeacherID INT PRIMARY KEY IDENTITY(101,1) NOT NULL,
	[Name] VARCHAR(50) NOT NULL,
	ManagerID INT FOREIGN KEY REFERENCES Teachers(TeacherID) NOT NULL
)

CREATE DATABASE RelationsEx
USE RelationsEx

CREATE TABLE Subjects(
	SubjectID INT PRIMARY KEY IDENTITY NOT NULL,
	SubjectName VARCHAR(30) NOT NULL
)

CREATE TABLE Majors(
	MajorID INT PRIMARY KEY IDENTITY NOT NULL,
	[Name] VARCHAR(50) NOT NULL
)
CREATE TABLE Students(
	StudentID INT PRIMARY KEY IDENTITY NOT NULL,
	StudentNumber INT NOT NULL,
	StudentName VARCHAR(50) NOT NULL,
	MajorID INT FOREIGN KEY REFERENCES Majors(MajorID)
)

CREATE TABLE Agenda(
	StudentID INT FOREIGN KEY REFERENCES Students(StudentID) NOT NULL,
	SubjectID INT FOREIGN KEY REFERENCES Subjects(SubjectID) NOT NULL,
	PRIMARY KEY(StudentID, SubjectID)
)

CREATE TABLE Payments(
	PaymentID INT PRIMARY KEY IDENTITY NOT NULL,
	PaymentDate DATE NOT NULL,
	PaymentAmount DECIMAL NOT NULL,
	StudentID INT FOREIGN KEY REFERENCES Students(StudentID) NOT NULL
)

SELECT EmployeeID, FirstName, LastName, Salary,
DENSE_RANK() OVER(PARTITION BY(Salary) ORDER BY(EmployeeID)) AS [Rank]
FROM Employees
WHERE Salary BETWEEN 10000 AND 50000
ORDER BY Salary DESC

SELECT PeakName, RiverName,
CONCAT(LOWER(LEFT(p.PeakName,LEN(p.PeakName)-1)), LOWER(r.RiverName)) AS Mix
FROM Peaks AS p, Rivers AS r
WHERE RIGHT(p.PeakName,1) = LEFT(r.RiverName,1)

SELECT FirstName, LastName
FROM Employees
WHERE FirstName LIKE 'sa%'

SELECT FirstName, LastName
FROM Employees
WHERE LastName LIKE '%EI%'

SELECT FirstName
FROM Employees AS e
WHERE e.DepartmentID IN(3,10) AND DATEPART(YEAR,e.HireDate) BETWEEN 1995 AND 2005 

SELECT FirstName, LastName
FROM Employees AS e
WHERE e.JobTitle NOT LIKE '%engineer%'

INSERT INTO Towns VALUES
('London'),
('Edinburg'),
('Moscow')


SELECT [Name]
FROM Towns
WHERE LEN([Name]) IN(5,6)
ORDER BY [Name]


SELECT TownID, [Name]
FROM Towns
WHERE [Name] LIKE 'M%'

CREATE VIEW v_AllEmployeesHiredAfter2000Year AS
SELECT FirstName, LastName
FROM Employees AS e
WHERE DATEPART(YEAR, e.HireDate) > 2000

SELECT * 
FROM v_AllEmployeesHiredAfter2000Year

SELECT FirstName, LastName
FROM Employees AS e
WHERE LEN(e.LastName) IN(5)

SELECT * 
FROM Employees

SELECT e.FirstName, e.LastName,e.HireDate,d.[Name] AS DeptName
FROM Employees AS e
JOIN Departments AS d ON d.DepartmentID=e.DepartmentID
WHERE e.HireDate>'1-1-1999' AND d.[Name] IN('Sales','Finance')
ORDER BY e.HireDate

SELECT 
e.EmployeeID,
e.FirstName,
e.LastName,
d.[Name] AS DepartmentName
FROM Employees AS e
JOIN Departments AS d ON e.DepartmentID=d.DepartmentID
WHERE d.[Name]='Sales'
ORDER BY e.EmployeeID

SELECT TOP(50)
e.FirstName,
e.LastName,
t.[Name] AS Town,
a.AddressText
FROM Employees AS e
JOIN Addresses AS a ON a.AddressID = e.AddressID
JOIN Towns AS t ON t.TownID=a.TownID
ORDER BY e.FirstName, e.LastName


/****** Script for SelectTopNRows command from SSMS  ******/
SELECT TOP (1000) [EmployeeID]
      ,[FirstName]
      ,[LastName]
      ,[Salary]
	  ,DENSE_RANK() OVER (ORDER BY(EmployeeID)) AS [Rank]
  FROM [SoftUni].[dbo].[Employees]
  WHERE Salary BETWEEN 10000 AND 50000
  order by Salary desc

SELECT EmployeeID, FirstName, LastName, Salary,
DENSE_RANK() OVER(PARTITION BY(Salary) ORDER BY(EmployeeID)) AS [Rank]
FROM Employees
WHERE Salary BETWEEN 10000 AND 50000
ORDER BY Salary DESC

SELECT PeakName, RiverName,
CONCAT(LOWER(LEFT(p.PeakName,LEN(p.PeakName)-1)), LOWER(r.RiverName)) AS Mix
FROM Peaks AS p, Rivers AS r
WHERE RIGHT(p.PeakName,1) = LEFT(r.RiverName,1)

SELECT TOP(5) e.EmployeeID, e.JobTitle, a.AddressID, a.AddressText
FROM Employees AS e
LEFT JOIN Addresses AS a ON e.AddressID = a.AddressID
ORDER BY a.AddressID

SELECT e.FirstName,
	   e.LastName,
	   t.[Name] AS Town,
	   a.AddressText
FROM Employees AS e
JOIN Addresses AS a ON a.AddressID=e.AddressID
JOIN Towns AS t ON t.TownID=a.TownID
ORDER BY e.FirstName, e.LastName

SELECT 
	 e.EmployeeID,
	 e.FirstName,
	 e.LastName,
	 d.[Name] AS DepartmentName
FROM Employees AS e
JOIN Departments AS d ON d.DepartmentID=e.DepartmentID
WHERE d.[Name]='Sales'
ORDER BY e.EmployeeID